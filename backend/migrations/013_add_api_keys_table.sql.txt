-- Migration: Create API Keys Table for Rotation
-- This script creates a table to manage multiple API keys for various services.

CREATE TABLE IF NOT EXISTS api_keys (
    id SERIAL PRIMARY KEY,
    service VARCHAR(50) NOT NULL, -- e.g., 'gemini', 'openai'
    api_key TEXT NOT NULL,
    usage_count INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    last_used_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Use the existing function to update the 'updated_at' timestamp.
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_timestamp_on_api_keys ON api_keys;
CREATE TRIGGER set_timestamp_on_api_keys
BEFORE UPDATE ON api_keys
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_api_keys_service_active_usage ON api_keys(service, is_active, usage_count);
CREATE INDEX IF NOT EXISTS idx_api_keys_last_used ON api_keys(last_used_at);

-- =============================================================================
-- Grant Permissions to Application User
-- =============================================================================
-- IMPORTANT: Replace 'yourdbuser' with the actual DB_USER from your .env file.
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE api_keys TO yourdbuser;
GRANT USAGE, SELECT ON SEQUENCE api_keys_id_seq TO yourdbuser;
